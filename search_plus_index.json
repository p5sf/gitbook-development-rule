{"./":{"url":"./","title":"首页","keywords":"","body":"首页 用于团队协作，统一规范提升开发效率和维护软件，通过开发规范的约束提升自身的逻辑思维能力，从而提升个人编码能力及水平和团队合作 "},"文档规范.html":{"url":"文档规范.html","title":"文档规范","keywords":"","body":"文档规范 文件 文档的文件名不得含有空格。 文件名必须使用半角字符，不得使用全角字符。这也意味着，中文不能用于文件名。 错误：名词解释.md 正确：glossary.md 文件名建议只使用小写字母，不使用大写字母。 错误：TroubleShooting.md 正确：troubleshooting.md 为了醒目，某些说明文件的文件名，可以使用大写字母，比如README、LICENSE。 文件名包含多个单词时，单词之间建议使用半角的连词线（-）分隔。 不佳：advanced_usage.md 正确：advanced-usage.md 标题 标题一般分为四级、依次降级，原则如下 标题不能跳级：例如一级标题下，不能直接出现三级标题 # 一级标题 ### 三级标题 如果子标题只有一个可省略，例如二级标题下只含有一个三级标题，三级标题完全可以省略 ## 二级标题 A ### 三级标题 A ## 二级标题 B 下级标题不重复上一级标题的名字 ## 概述 ### 概述 谨慎使用四级标题，尽量避免出现，保持层级的简单，如果篇幅较长可以单独，较短建议使用项目列表 结构一：篇幅较长 ### 三级标题 #### 四级标题 A #### 四级标题 B #### 四级标题 C 结构二：篇幅较少 ### 三级标题 **（1）A** **（2）B** **（3）C** 文本 空格问题 中文与英文之间，应留有一个半角空格 数字和特殊符号视为半角英文，空格无所谓，但要保持风格统一 单位可适当留有空格 语句问题 避免使用长句，长度尽量保持在 20 个字以内 尽量使用简单句和并列句，避免使用复合句 并列句：他昨天生病了，没有参加会议。 复合句：那个昨天生病的人没有参加会议。 同样一个意思，尽量使用肯定句表达，不使用否定句表达 错误：请确认没有接通装置的电源。 正确：请确认装置的电源已关闭。 避免使用双重否定句 错误：没有删除权限的用户，不能删除此文件。 正确：用户必须拥有删除权限，才能删除此文件。 写作风格 尽量不使用被动语态，改为使用主动语态 错误：假如此软件尚未被安装， 正确：假如尚未安装这个软件， 不使用非正式的语言风格。 错误：Lady Gaga 的演唱会真是酷毙了，从没看过这么给力的表演！！！ 正确：无法参加本次活动，我深感遗憾。 不使用冷僻、生造或者文言文的词语，而要使用现代汉语的常用表达方式。 错误：这是唯二的快速启动的方法。 正确：这是仅有的两种快速启动的方法。 用对“的”、“地”、“得”。 她露出了开心的笑容。 （形容词＋的＋名词） 她开心地笑了。 （副词＋地＋动词） 她笑得很开心。 （动词＋得＋副词） 使用代词时（比如“其”、“该”、“此”、“这”等词），必须明确指代的内容，保证只有一个含义。 错误：从管理系统可以监视中继系统和受其直接控制的分配系统。 正确：从管理系统可以监视两个系统：中继系统和受中继系统直接控制的分配系统。 名词前不要使用过多的形容词。 错误：此设备的使用必须在接受过本公司举办的正式的设备培训的技师的指导下进行。 正确：此设备必须在技师的指导下使用，且指导技师必须接受过由本公司举办的正式设备培训。 尽可能使用中文数词，特别是当前后都是中文时。 错误：我们发布了5个产品 正确：我们发布了五个产品 英文 英文原文如果使用了复数形式，翻译成中文时，应该将其还原为单数形式。 英文：...information stored in random access memory (RAMs)... 中文：⋯⋯存储在随机存取存储器（RAM）里的信息⋯⋯ 外文缩写可以使用半角圆点(.)表示缩写。 U.S.A. Apple, Inc. 表示中文时，英文省略号（...）应改为中文省略号（⋯⋯） 英文：5 minutes later... 中文：5 分钟过去了⋯⋯ 英文书名或电影名改用中文表达时，双引号应改为书名号 英文：He published an article entitled \"The Future of the Aviation\". 中文：他发表了一篇名为《航空业的未来》的文章。 第一次出现英文词汇时，在括号中给出中文标注。此后再次出现时，直接使用英文缩写即可 IOC（International Olympic Committee，国际奥林匹克委员会）。这样定义后，便可以直接使用“IOC”了。 专有名词中每个词第一个字母均应大写，非专有名词则不需要大写 “American Association of Physicists in Medicine”（美国医学物理学家协会）是专有名词，需要大写。 “online transaction processing”（在线事务处理）不是专有名词，不应大写 表达 单位：除了「%」、「°C」、以及倍数单位(如 2x、3n)之外，其余数字与单位之间需要加空格。 正确：温度为 100°C 的水 正确：今天出去買菜花了 5000 元。 正确：我家的光纖入屋寬頻有 10 Gbps，SSD 一共有 20 TB。 错误：温度为 100 °C 的水 错误：今天出去買菜花了5000元。 错误：我家的光纖入屋寬頻有 10Gbps，SSD 一共有 20TB。 数值：数值为千位以上，应添加千分号（半角逗号）。 XXX 公司的实收资本为 ￥1,258,000 人民币。 数值表达：带有单位或百分号时，两个数字建议都要加上单位或百分号。 132 kg～234 kg 67%～89% 程度表示法：数字的增加要使用“增加了”、“增加到”。“了”表示增量，“到”表示定量。 增加到过去的两倍 （过去为一，现在为二） 增加了两倍 （过去为一，现在为三） 数字的减少要使用“降低了”、“降低到”。“了”表示增量，“到”表示定量。 降低到百分之八十 （定额是一百，现在是八十） 降低了百分之八十 （原来是一百，现在是二十） 不能用“降低 N 倍”或“减少 N 倍”的表示法，要用“降低百分之几”或“减少百分之几”。因为减少（或降低）一倍表示数值原来为一百，现在等于零 中文句子内部的并列词，最后一个尽量使用（和）来连接，使句子读起来更加连贯 正确：我最欣赏的科技公司有 Google、Facebook、腾讯、阿里，以及百度等。 正确：我最欣赏的科技公司有 Google、Facebook、腾讯、阿里和百度等。 符号 在中文语句中，均采用全角符号，英文语句则半角符号 句号、问号、叹号、逗号、顿号、分号和冒号不得出现在一行之首 句号表达结束、逗号表达停顿、顿号表达并列 中文符号，均应该采取全角符号 引号： 引用时，应该使用全角双引号（“ ”），注意前后双引号不同。 例句：许多人都认为客户服务的核心是“友好”和“专业”。 引号里面还要用引号时，外面一层用双引号，里面一层用单引号（‘ ’），注意前后单引号不同。 例句：鲍勃解释道：“我要放音乐，可萨利说，‘不行！’。” 补充说明时，使用全角圆括号（（）），括号前后不加空格。 例句：请确认所有的连接（电缆和接插件）均安装牢固。 冒号： 全角冒号（：）常用在需要解释的词语后边，引出解释和说明。 例句：请确认以下几项内容：时间、地点、活动名称和来宾数量。 表示时间时，应使用半角冒号（:）。 例句：早上 8:00 省略号 （1）省略号（⋯⋯）表示语句未完、或者语气的不连续。 （2）省略号占两个汉字空间、包含六个省略点，不要使用。。。或...等非标准形式。 （3）省略号不应与“等”这个词一起使用。 省略号请使用「……」标准用法，不要使用「。。。」 ，也不要使用三个英文句点「.」。 错误：我们为会餐准备了香蕉、苹果、梨…等各色水果。 正确：我们为会餐准备了各色水果，有香蕉、苹果、梨⋯⋯ 正确：我们为会餐准备了香蕉、苹果、梨等各色水果。 感叹号 应该使用平静的语气叙述，尽量避免使用感叹号（！）。 不得多个感叹号连用，比如！！和!!!。 破折号 破折号————一般用于进一步解释。 破折号应占两个汉字的位置。如果破折号本身只占一个汉字的位置，那么前后应该留出一个半角空格。 例句：直觉————尽管它并不总是可靠的————告诉我，这事可能出了些问题。 例句：直觉 —— 尽管它并不总是可靠的 —— 告诉我，这事可能出了些问题。 连接号 （1）连接号用于连接两个类似的词。 （2）以下场合应该使用直线连接号（-），占一个半角字符的位置。 两个名词的复合 图表编号 例句：氧化-还原反应 例句：图 1-1 （3）数值范围（例如日期、时间或数字）应该使用波浪连接号（～）或一字号（—），占一个全角字符的位置。 例句：2009 年～2011 年 注意，波浪连接号前后两个值都建议加上单位。 （4）波浪连接号也可以用汉字“至”代替。 例句：周围温度：-20 °C 至 -10 °C 参考文献 中文技术文档的写作规范 - 阮一峰 中文排版需求 - by W3C "},"common/代码格式.html":{"url":"common/代码格式.html","title":"代码格式","keywords":"","body":"代码格式 编码规范 [!Note] 请遵循以下常见方法或语句的规范，减少代码漏洞 参数方法 POJO类必须写 toString 方法 禁止在POJO类中，同时存在对应属性xxx的isXxx()和getXxx()方法 所有的POJO类属性必须使用包装数据类型 构造方法里面禁止加入任何业务逻辑，如果有初始化逻辑，请放在init方法中 浮点数的基本数据类型不能用==来比较，精度用compareTo 来比较 如果判断语句过长，建议封装并赋值布尔变量 在一个 switch 块内，都必须包含一个 default，即使什么都没有 工具类不改有公共的方法，应改为私有 定义对象、变量、获取数据库连接和不必要的 try-catch 等耗时操作尽量移到循环外 不在 finally 块使用 return：try 块中的 return 语句执行成功后，并不马上返回，而是继续执行 finally 块中的语句 判断字符串是否相等，应该先判断字符串是否存在并且使用 equals 判断，而不是 == // Error if (firstName == lastName) // right if (firstName != null && firstName.equals(lastName)) 集合规范 集合初始化时，指定集合初始值大小 List 和Map 必须检测空 如果自定义对象作为Map的键，那么必须覆写hashCode和equals 只要重写 equals，就必须重写 hashCode 判断所有集合内部的元素是否为空，使用isEmpty()方法，而不是size()==0的方式 使用 Map 的方法 keySet()/values()/entrySet()返回集合对象时，不可以对其进行添加元素操作 使用工具类 Arrays.asList()把数组转换成集合时，不能使用其修改集合相关的方法，如add/remove/clear 在使用 Collection 接口任何实现类的 addAll()方法时，都要对输入的集合参数进行NPE 判断 空集合不应该返回 空对象，否则还要判断集合是否为空，而是应该返回空集合，也不需要判断空 错误案例 public static List getAllResults() { return null; } public static Result[] getResults() { return null; } public static Map getValues() { return null; } // 判断集合是否为空 public static void main(String[] args) { Result[] results = getResults(); if (results != null) { for (Result result: results) { } } 正确案例 public static List getAllResults() { return Collections.emptyList(); } public static Result[] getResults() { return new Result[0]; } public static Map getValues() { return Collections.emptyMap(); } public static void main(String[] args) { for (Result result: getAllResults()) { } 不要在 foreach 循环里进行元素的 remove/add 操作。remove 元素请使用 Iterator方式，如果并发操作，需对 Iterator 对象加锁 正例： List list = new ArrayList<>(); list.add(\"1\"); list.add(\"2\"); Iterator iterator = list.iterator(); while (iterator.hasNext()) { String item = iterator.next(); if (删除元素的条件) { iterator.remove(); } } 反例： for (String item : list) { if (\"1\".equals(item)) { list.remove(item); } } ArrayList的subList结果不可强转成ArrayList，否则会抛出 ClassCastException异常⭐ ⭐Map 遍历：建议使用entrySet ，如果是 JDK8，使用Map.forEach 方法 集合类 key value Super 说明 Hashtable 不允许为 null 不允许为 null Dictionary 线程安全 ConcurrentHashMap 不允许为 null 不允许为 null AbstractMap 锁分段技术（JDK8:CAS） TreeMap 不允许为 null 允许为 null AbstractMap 线程不安全 HashMap 允许为 null 允许为 null AbstractMap 线程不安全 并发规范 获取单例对象需要保证线程安全，其中的方法也要保证线程安全。 创建线程或线程池时请指定有意义的线程名称，方便出错时回溯 线程资源必须通过线程池提供，不允许在应用中自行显式创建线程 HashMap 在容量不够进行 resize 时由于高并发可能出现死链，导致 CPU 飙升 线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式 在线程池场景下，必须回收自定义的 ThreadLocal 变量，尽量在代理中使用 try-finally 块进行回收。 高并发时，应该考量锁的性能。能用无锁数据结构，就不要用锁；能锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁 进入业务代码块之前，须先判断当前线程是否持有锁。锁的释放规则与锁的阻塞等待方式相同 正例： Lock lock = new XxxLock(); // ... boolean isLocked = lock.tryLock(); if (isLocked) { try { doSomething(); doOthers(); } finally { lock.unlock(); } } 锁的使用：如果每次访问冲突概率小于 20%，推荐使用乐观锁，否则使用悲观锁。乐观锁的重试次数不得小于3次。 使用 CountDownLatch 进行异步转同步操作，每个线程退出前必须调用 countDown ，线程执行代码注意 catch 异常，确保 countDown 方法被执行到，避免主线程无法执行至await 方法，直到超时才返回结果 volatile 解决多线程内存不可见问题。对于一写多读，可解决变量同步问题，但如果多写，无法解决线程安全问题 高并发场景中，避免使用【等于】来判断中断或退出的条件。容易产生等值判断被【击穿】的情况，建议使用大于或小于 "},"common/命名风格.html":{"url":"common/命名风格.html","title":"命名风格","keywords":"","body":"命名风格 标识符 不能以下划线或美元符号开始，也不能以下划线或美元符号结束，严禁使用拼音与英文混合的方式 反例：_name name$ DazhePrice 类名规范 使用大驼峰规则，以下情形例外：DO / BO / DTO / VO / AO / PO / UID等 特殊后缀词：抽象类(Abstract | Base)、实现类(Impl)、异常类(Exception)、工厂类(Factory)、测试类(Test)、枚举类(Enum) 类名尽量单数形式命名，如果有复数含义，类名可以使用复数形式 类名少用语义不明的后缀，例如：Info，Table，Datail 等 如果模块、接口、类、方法使用了设计模式，在命名时需体现出具体模式 例如 UserFactory 接口类中的方法和属性尽量不要加任何修饰符号（public 也不要加），保持代码的简洁性，并加上注释 枚举类名带上Enum后缀，枚举成员名称需要全大写，单词间用下划线隔开 变量规范 常量命名全部大写，单词间用下划线隔开 例如 MAX_STOCK_COUNT POJO类中的任何布尔类型的变量，都不要加is前缀，否则部分框架解析会引起序列化错误 不允许任何魔法值（即未经预先定义的常量）直接出现在代码中 在long或者Long赋值时，数值后使用大写的L，小写容易跟数字混淆，造成误解 在常量与变量的命名时，表示类型的名词放在词尾：startTime / workQueue / nameLis 如果变量值仅在一个固定范围内变化用enum类型来定义，例如一年四季 或状态 作用域越大，名字越长。因此只有在短作用域才能使用一些简单名字 布尔变量：is、can、should、has 等前缀 项目命名 ⭐全部小写，以中划线分割，例如：order-service-client 根据不同类型写包名 .个体项目(indi ): 如：indi.发起者名.项目名.模块名 个人项目(pers): 如：pers.个人名.项目名.模块名 私有项目(priv ): 如：priv.个人名.项目名.模块 公司项目( com / cn / net / org / edu): 如：com.公司名.项目名.模块名 方法规范 方法名、参数名、成员变量、局部变量都统一使用小驼峰风格 方法名一般以动词开始，并区分单复数 方法名一般为 动词 + 名词/动词短语 🚧 各层命名规范 方法前缀 解释说明 方法名 get、list 获取单个对象、获取多个对象 getAge、ListUsers count、max、min 统计值、最大、最小 maxAge remove、delete、update 删除更新 deleteUsers is、has 是否符合、是否含有，都返回真伪 isValid、hasObservers can need 能够、是否需要执行某个方法 canRemove needsRemove 注释标记 [!Note] 在注释内添加标记，了解注释的用途 TODO：表示待做 FIXME：表示待修复 HACK：表示粗糙解决 XXX：表示危险 领域模型 数据对象：xxxDO，xxx即为数据表名。 数据传输对象：xxxDTO，xxx为业务领域相关的名称。 展示对象：xxxVO，xxx一般为网页名称。 POJO是DO/DTO/BO/VO的统称，禁止命名成xxxPOJO "},"common/目录规范.html":{"url":"common/目录规范.html","title":"目录规范","keywords":"","body":"目录规范 项目目录 src 源码目录 |-- common 各个项目的通用类库 |-- config 项目的配置信息 |-- constant 全局公共常量 |-- handler 全局处理器 |-- interceptor 全局连接器 |-- listener 全局监听器 |-- module 各个业务 |-- |--- employee 员工模块 |-- |--- role 角色模块 |-- |--- login 登录模块 |-- third 三方服务，比如redis, oss，微信sdk等等 |-- util 全局工具类 |-- Application.java 启动类 公共目录 src 源码目录 |-- common 各个项目的通用类库 |-- |--- anno 通用注解，比如权限，登录等等 |-- |--- constant 通用常量，比如 ResponseCodeConst |-- |--- domain 全局的 javabean，比如 BaseEntity,PageParamDTO 等 |-- |--- exception 全局异常，如 BusinessException |-- |--- json json 类库，如 LongJsonDeserializer，LongJsonSerializer |-- |--- swagger swagger 文档 |-- |--- validator 适合各个项目的通用 validator，如 CheckEnum，CheckBigDecimal 等 配置目录 config 目录用于存放各个项目通用的项目，但是又可以依照项目进行特定的修改。 src 源码目录 |-- config 项目的所有配置信息 |-- |--- MvcConfig mvc的相关配置，如interceptor,filter等 |-- |--- DataSourceConfig 数据库连接池的配置 |-- |--- MybatisConfig mybatis的配置 |-- |--- .... 其他 模块规范 src |-- module 所有业务模块 |-- |-- role 角色模块 |-- |-- |--RoleController.java controller |-- |-- |--RoleConst.java role相关的常量 |-- |-- |--RoleService.java service |-- |-- |--RoleDao.java dao |-- |-- |--domain domain |-- |-- |-- |-- RoleEntity.java 表对应实体 |-- |-- |-- |-- RoleDTO.java dto对象 |-- |-- |-- |-- RoleVO.java 返回对象 |-- |-- employee 员工模块 |-- |-- login 登录模块 |-- |-- email 邮件模块 |-- |-- .... 其他 "},"日志规范.html":{"url":"日志规范.html","title":"日志规范","keywords":"","body":"日志规范 异常处理 异常不要用来做流程控制，条件控制，因为异常的处理效率比条件分支低 捕获异常要及时处理，如果不想处理，请将该异常抛给它的调用者，最外层的业务使用者，必须处理异常 try 块放到了事务代码中，catch 异常后，如果需要回滚事务，要注意手动回滚事务 不能在 finally 块中使用 return，finally 块中的 return 返回后方法结束执行，不 会再执行 try 块中的 return 语句 抛异常还是返回错误码，开发接口使用错误码，而应用内部推荐抛出异常，跨引用优先封装 Result 输出日志 日志文件推荐至少保存 15 天，因为有些异常具备以“周”为频次发生的特点 建议日志命名有利于区分 避免重复打印日志，浪费磁盘空间，在 xml文件中 中设置 additivity=false 生产环境禁止输出 debug 日志;有选择地输出 info 日志，要注意日志输出量问题 日志输出格式 logger.debug(\"Processing trade with id: {} symbol : {} \", id, symbol); [!tip] 如果日志级别是 warn，上述日志不会打印，如果symbol 是对象，可能还会浪费系统资源 "},"MySQL规范.html":{"url":"MySQL规范.html","title":"MySQL规范","keywords":"","body":"MySQL 规范 字段规范 字段名必须使用小写字母或数字，多单词采用蛇形命名法（下划线分割） 禁用保留字 小数类型为 decimal 如果存储的字符串长度几乎相等，使用 char 定长字符串类型。 ⭐ 表名、字段名必须使用小写字母或数字，禁止出现数字开头，表名不使用复数名词 字段建议加上id,create_time,update_time。 表达是与否概念的字段，使用is_xxx的方式命名，但OJO类中的任何布尔类型的变量，都不要加is前缀，要求在 resultMap 中进行字段与属性之间的映射。 尽量把所有列定义为NOT NULL。，NULL列需要一个额外字节作为判断是否为 NULL 的标志位 字段允许适当冗余，不是频繁修改的字段。 不是唯一索引的字段。不是 varchar 超长字段 表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 unsigned tinyint 1表示是，0表示否) 索引规范 索引命名规范：主键索引： pk 字段名；唯一索引： uk 字段名 ；普通索引：idx _字段名。 建组合索引的时候，区分度最高的在最左边 利用覆盖索引来进行查询操作，避免回表 注意隐式转换，索引可能不生效。select * from user where userid =123; userid 为字符串类型。默认转化整形。应带单引号 有 order by 的场景，注意索引的有序性。索引如果存在范围查询，那么索引有序性无法利用,如果必要请把索引放在最后 语句规范 超过三个表禁止 join。需要 join 的字段，数据类型保持绝对一致；多表关联查询时，保证被关联的字段需要有索引。 不要使用 count(列名)或 count(常量)来替代 count()，count()会统计值为 NULL 的行，而 count(列名)不会统计此列为 NULL 值的行。 代码中写分页查询逻辑时，若 count 为 0 应直接返回，避免执行后面的分页语句。 不得使用外键与级联，一切外键概念必须在应用层解决 ⭐数据订正（特别是删除或修改记录操作）时，要先 select，避免出现误删除，确认无误才能执行更新语句 "},"项目规范.html":{"url":"项目规范.html","title":"项目规范","keywords":"","body":"项目规范 模块规范 [!tip] 项目中的各个模块要遵循合格的命名，严格遵循 MVC 设计模块进行统一，例如服务模块和控制类分门别类保存在不同模块上，如果项目过于太小，不必创建模块，直接创建包 各服务模块工程名统一，如 user-service，order-service 等 容器控制类，统一后缀命名controller 实体类放置在 domain 包下 数据库操作类放在 repository 目录下，以Repository 为后缀，例如UserRepository Maven规范 名称规范： GroupID 格式：com.{公司 }.业务线.[子业务线]，最多4级 例如：com.joymef.platform 或 com.joymef.social.blog ArtifactID 格式: 产品线名-模块名 例如：user-service Version 版本号：主版本号.次版本号.修订号 起始版本号：1.0.0，而不是 0.0.1 版本定义：开发阶段版本号定义为 SNAPSHOT, 发布后版本改为 RELEASE 依赖三方库群时，必须定义一个统一的版本变量，避免版本号不一致 所有 pom 文件中的依赖声明放在语句块中，所有版本放在 语句块中。 "}}